#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        MiddleClick1 {
            bindings = <&mkp MCLK>;
            key-positions = <27 28>;
        };

        MiddleClick2 {
            bindings = <&mkp MCLK>;
            key-positions = <35 36>;
        };

        colons {
            bindings = <&kp SEMI>;
            key-positions = <20 21>;
        };

        quotes {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <33 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W       &kp E        &kp R        &kp T                                                  &kp Y            &kp U        &kp I             &kp O            &kp P
&kp A       &kp S       &kp D        &kp F        &kp G                 &mkp MB3            &trans       &kp H            &kp J        &kp K             &kp L            &kp MINUS
&kp Z       &mt LALT X  &mt LSHFT C  &mt LCTRL V  &kp B                 &mkp LCLK           &mkp RCLK    &kp N            &mt RCTRL M  &mt RSHIFT COMMA  &mt RALT PERIOD  &kp SLASH
&kp ESCAPE  &mkp RCLK   &mkp LCLK    &lt 1 TAB    &mt LEFT_SHIFT SPACE  &lt 5 LANGUAGE_1    &lt 2 ENTER  &mt LCTRL SPACE                                                  &kp LWIN
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SIGNS {
            bindings = <
&kp EXCL      &kp AT          &kp HASH          &kp DOLLAR  &kp PERCENT                         &kp CARET      &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH
&kp QUESTION  &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp PIPE    &kp SINGLE_QUOTE  &trans    &trans  &kp BACKSPACE  &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp MINUS
&kp GRAVE     &kp LESS_THAN   &kp GREATER_THAN  &kp AMPS    &kp SEMI          &trans    &trans  &kp EQUAL      &kp ASTRK  &kp COMMA             &kp PERIOD             &kp SLASH
&trans        &trans          &trans            &trans      &trans            &trans    &trans  &trans                                                                 &trans
            >;
        };

        NUM_SIGNS {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3      &kp NUMBER_4  &kp N5                              &kp NUMBER_6   &kp N7     &kp N8            &kp N9             &kp N0
&kp QUESTION  &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp PIPE      &kp SINGLE_QUOTE  &trans    &trans  &kp BACKSPACE  &kp PLUS   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS
&kp GRAVE     &kp LESS_THAN   &kp GREATER_THAN  &kp AMPS      &kp SEMI          &trans    &trans  &kp EQUAL      &kp ASTRK  &kp COMMA         &kp PERIOD         &kp SLASH
&trans        &trans          &trans            &trans        &trans            &trans    &trans  &trans                                                         &trans
            >;
        };

        unused {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                     &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans    &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        AML {
            bindings = <
&kp Q       &kp W       &kp E        &kp R        &kp T                                                  &kp Y            &kp U        &kp I             &kp O            &kp P
&kp A       &kp S       &kp D        &kp F        &kp G                 &mkp MB3            &trans       &kp H            &kp J        &kp K             &kp L            &kp MINUS
&kp Z       &mt LALT X  &mt LSHFT C  &mt LCTRL V  &kp B                 &mkp LCLK           &mkp RCLK    &kp N            &mt RCTRL M  &mt RSHIFT COMMA  &mt RALT PERIOD  &kp SLASH
&kp ESCAPE  &mkp RCLK   &mkp LCLK    &lt 1 TAB    &mt LEFT_SHIFT SPACE  &lt 5 LANGUAGE_1    &lt 2 ENTER  &mt LCTRL SPACE                                                  &kp LWIN
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SCROLL {
            bindings = <
&kp F1  &kp F2        &kp F3              &kp F4         &none                     &kp HOME       &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &kp END
&kp F5  &kp F6        &kp F7              &kp F8         &none   &trans    &none   &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp DELETE
&kp F9  &mt LALT F10  &mt LEFT_SHIFT F11  &mt LCTRL F12  &none   &none     &none   &none          &kp RCTRL       &kp RSHIFT      &kp RIGHT_ALT    &kp INS
&trans  &trans        &trans              &trans         &trans  &trans    &trans  &trans                                                          &trans
            >;
        };
    };
};
